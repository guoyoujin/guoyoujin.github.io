<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Charles的安装和使用]]></title>
    <url>%2F2017%2F07%2F18%2FCharles%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[下载安装Charles这里提供下载安装地址 http://charlesproxy.iiilab.com/4_1_4/charles.jar 破解文件 https://raw.githubusercontent.com/guoyoujin/guoyoujin.github.io/develop/download/charles.jar 帮助地址 http://charles.iiilab.com/ 安装之后打开Charles即可 破解Charles找到应用程序里面的Charles ===&gt;&gt;右击鼠标====&gt;&gt;显示包内容===&gt;&gt;进入文件夹/Contents/Java里面，之后把破解文件charles.jar替换掉即可，如下图所示 安装证书选择Help里面的 手机安装证书在Safari浏览器里面输入网址 ：chls.pro/ssl按照提示进行操作]]></content>
  </entry>
  <entry>
    <title><![CDATA[android px sp dp解密]]></title>
    <url>%2F2017%2F05%2F17%2Fandroid-px-sp-dp%E8%A7%A3%E5%AF%86%2F</url>
    <content type="text"><![CDATA[分辨率：屏幕上显示的像素个数，单位尺寸内像素点越多，显示的图像就越清楚12345主流分辨率:480*800、720*1280、1080*1920像素密度240dpi(480*800)、320dpi(720*1280)、480dpi(1080*1920)单位px:像素 dp:设备独立像素(160dpi为标准)123240dpi下，1dp=1.5px320dpi下，1dp=2px480dpi下，1dp=3px sp:等同于dp，用于描述字体大小123240dpi下，1sp=1.5px 320dpi下，1sp=2px480dpi下，1sp=3px 常见分辨率123456789101112131415161718192021222324252627284:3VGA 640*480QVGA 320*240HVGA 480*320SVGA 800*6005:3WVGA 800*48016:9FWVGA 854*480HD 1920*1080QHD 960*540720p 1280*7201080p 1920*1080AppleiPhone4/4s 960*640iPhone5/5s 1136*640iPhone6 1334*750iPhone6Plus 1920*1080小米1 854*480小米2 1280*720红米1/1s/note 1280*720对应的DPIHVGA mdpiWVGA hdpiFWVGA hdpiQHD hdpi720p xhdpi1080p xxhdpi 最佳方案1234选取320dpi下(720*1280)进行设计，此分辨率下1dp=2px对于一切切图资源特殊处理输出多套分辨率的切图，例如480p和720p，在设计的时候要注意好切图区域的大小能被2和1.5整除的大小，如48p*48px、96*96px等。使用相对于单位进行标注 采用自适应布局标注尽量采用相对关系 文字123中文字体：默认为Droid Sans Fallback,设计时可采用微软雅黑。英文字体：Andriod4.x及以上采用Roboto，Andrio2.x和andriod3.x采用 Droid Sans。建议尽量采用系统默认字体。Andriod规范建议，字号采用12sp、14sp、18sp、22sp等四个级别来设计。（实际设计时可以按实际情况调整） 总结12345采用720*1280分辨率来进行设计。（设计时，采用偶数值进行设计，方便dp和px的转换）开始标注了，标注尽量采用相对位置进行标注。切图了，在720*1280下进行切图，可以完全适配720*1280后放大缩小切图资源分别适配480*800、1080*1920不要忘记了，开发完后要进行bug测试（视觉方面的）]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android 6.0权限一刀切问题]]></title>
    <url>%2F2017%2F05%2F17%2FAndroid-6-0%E6%9D%83%E9%99%90%E4%B8%80%E5%88%80%E5%88%87%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[今天使用m4的时候突然发现程序抛出异常了，原因是因为升级了小米的最新系统MIUI7.3稳定版本，仔细一看发现是Android6.0.1的操作系统，瞬间想到Android6.0的Requesting Permissions at Run Time特性。于是找到了google的官方文档和demo进行脑补官方文档：https://developer.android.com/training/permissions/requesting.html/ 官方demo： https://github.com/googlesamples/android-RuntimePermissions/blob/master/Application/src/main/java/com/example/android/system/runtimepermissions/MainActivity.java/ 首先必须在AndroidManifest.xml文件里面声明需要用到的权限，下面是一个权限例子1&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt; 至于代码实现如下：123456789101112131415161718192021222324252627282930313233343536373839int REQUEST_READ_PHONE=101; public void initPermission()&#123; if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) &#123; // Should we show an explanation? if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.READ_PHONE_STATE)) &#123; // Show an expanation to the user *asynchronously* -- don&apos;t block // this thread waiting for the user&apos;s response! After the user // sees the explanation, try again to request the permission. &#125; else &#123; // No explanation needed, we can request the permission. ActivityCompat.requestPermissions(this, new String[]&#123;Manifest.permission.READ_PHONE_STATE&#125;, REQUEST_READ_PHONE); // MY_PERMISSIONS_REQUEST_READ_CONTACTS is an // app-defined int constant. The callback method gets the // result of the request. &#125; &#125; &#125; @Override public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123; if (requestCode == REQUEST_READ_PHONE)&#123; // If request is cancelled, the result arrays are empty. if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123; //PERMISSION GRANTED &#125; else &#123; //PERMISSION DENIED permission denied Toast.makeText(this, &quot;您拒绝了权限请求，应用程序无法正常工作，请手动设置权限为允许&quot;, Toast.LENGTH_LONG).show(); &#125; &#125; else &#123; super.onRequestPermissionsResult(requestCode, permissions, grantResults); &#125; &#125;]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[fragment onAttach(Context context) and onAttach(Activity activity)]]></title>
    <url>%2F2017%2F05%2F17%2Ffragment-onAttach-Context-context-and-onAttach-Activity-activity%2F</url>
    <content type="text"><![CDATA[在使用dagger2为了解决依赖关系注入fragment的时候，发现我在注入Presenter的时候老是报空指针异常，郁闷了两天没解决这个问题，代码如下 抽象framgent12345678910public abstract class BaseFragment extends Fragment &#123; private static final String TAG = &quot;BaseFragment&quot;; @Override public void onAttach(Context context) &#123; super.onAttach(context); setupComponent((TxAssistantComponent) TxAssistantApplication.get(context).component()); &#125; protected abstract void setupComponent(TxAssistantComponent appComponent);&#125; 在需要的fragment里面注入123456789@Inject OrderListFragmentPresenter orderListFragmentPresenter; @Override protected void setupComponent(TxAssistantComponent appComponent) &#123; DaggerOrderListFragmentComponent.builder().txAssistantComponent(appComponent) .orderListFragmentModule(new OrderListFragmentModule()) .build().inject(this); &#125; 这个写法在android5.0以上是没问题的，后来回到家写代码的时候用了一个android4.4的手机，就出现上面所说的错误，这就把我郁闷的了，搞了一晚上没搞定，总感觉代码写的没错，由于对dagger2没啥了解，我就以为是dagger2的注入可能出了问题，于是就各种搜索，最后只能先睡觉了。 今天在公司发现用android5.0的手机就是运行流畅，脑子灵光一闪，会不会是生命周期的问题，果断serch了一下，还真是这个问题，导致这个根本的问题就是国内的android系统被深度定制引起的，后面找到解决办法，只需在全局抽象fragment添加如下方法即可123456789101112131415161718public abstract class BaseFragment extends Fragment &#123; private static final String TAG = &quot;BaseFragment&quot;; @Override public void onAttach(Context context) &#123; super.onAttach(context); setupComponent((TxAssistantComponent) TxAssistantApplication.get(context).component()); &#125; @Override public void onAttach(Activity activity) &#123; super.onAttach(activity); setupComponent((TxAssistantComponent) TxAssistantApplication.get(activity).component()); &#125; protected abstract void setupComponent(TxAssistantComponent appComponent);&#125;]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ng-file-upload使用]]></title>
    <url>%2F2017%2F05%2F17%2Fng-file-upload%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[github地址1.引入js文件12//= require adminAngular/lib/ng-file-upload-shim.min//= require adminAngular/lib/ng-file-upload.min 2.注入1var controllers = angular.module(&apos;controllers&apos;, [&apos;services&apos;, &apos;directives&apos;,&apos;ngFileUpload&apos;,&apos;xeditable&apos;]); 3.注入controller1234567891011121314151617181920212223242526272829303132controllers.controller(&apos;ProductGroupManagementCtrl&apos;,[&apos;$scope&apos;, &apos;$uibModal&apos;, &apos;mallOrderHttp&apos;, &apos;get_params&apos;,&apos;$uibModalInstance&apos;, &apos;$state&apos;,&apos;Upload&apos;,function($scope,$uibModal,mallOrderHttp,get_params,$uibModalInstance,$state,Upload)&#123; $scope.upload = function (files,product_group_id) &#123; if (files &amp;&amp; files.length) &#123; for (var i = 0; i &lt; files.length; i++) &#123; var file = files[i]; Upload.upload(&#123; url: &apos;/api/admin/v1/mall_orders/update_product_group&apos;, data: &#123; &apos;id&apos;: product_group_id &#125;, file: file &#125;).progress(function (evt) &#123; //进度条 var progressPercentage = parseInt(100.0 * evt.loaded / evt.total); console.log(&apos;progess:&apos; + progressPercentage + &apos;%&apos; + evt.config.file.name); &#125;).success(function (data, status, headers, config) &#123; //上传成功 console.log(&apos;file &apos; + config.file.name + &apos;uploaded. Response: &apos; + data); $scope.uploadImg = data; $scope.select_list_change(); &#125;).error(function (data, status, headers, config) &#123; //上传失败 console.log(&apos;error status: &apos; + status); &#125;); &#125; &#125; &#125;; //查看大图 $scope.show_big_image = function(objValue)&#123; $(this).ekkoLightbox(&#123; remote:objValue.image.url &#125;); &#125;&#125;]); 4.html文件12345678910&lt;td&gt;&lt;a href=&quot;javascript:void();&quot; ng-click=&quot;show_big_image(product_group)&quot;&gt;&lt;img style=&quot;display: inline-block;width:30px;height:30px&quot; ng-src=&quot;&#123;&#123;product_group.image.url&#125;&#125;&quot; /&gt;&lt;/a&gt;&lt;span class=&quot;btn btn-success fileinput-button btn-xs&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-plus&quot;&gt;&lt;/i&gt;&lt;span&gt;文件上传&lt;/span&gt;&lt;input ngf-select ngf-change=&quot;upload($files,product_group.id)&quot; ngf-multiple=&quot;true&quot; type=&quot;file&quot;/&gt;&lt;/span&gt;&lt;/td&gt;]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>angularjs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[上传android lib到jcenter库上面碰到的一些问题，以及解决办法]]></title>
    <url>%2F2017%2F05%2F17%2F%E4%B8%8A%E4%BC%A0android-lib%E5%88%B0jcenter%E5%BA%93%E4%B8%8A%E9%9D%A2%E7%A2%B0%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1.账号首先你得要有jcenter的账号，最简单的就是用google登陆了请移步 2.接下来就是拿到你自己的appk 和appid了，拿到这些东西之后，放到根目录下的local.properties文件里面，具体内容如下：12345## This file is automatically generated by Android Studio.# Do not modify this file -- YOUR CHANGES WILL BE ERASED!sdk.dir=/Users/guoyoujin/Library/Android/sdkbintray.user=trycatchbintray.apikey=12345 3.接下来就是引入需要的插件了，这里我采用了最新的gradle配置，配置如下：(1)根目录build.gradle配置1234567891011121314151617181920212223242526// Top-level build file where you can add configuration options common to all sub-projects/modules.buildscript &#123; repositories &#123; jcenter() mavenCentral() &#125; dependencies &#123; classpath &apos;com.android.tools.build:gradle:2.1.0&apos; classpath &apos;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4&apos; classpath &apos;com.github.dcendents:android-maven-gradle-plugin:1.4.1&apos; // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files &#125;&#125;allprojects &#123; repositories &#123; jcenter() mavenCentral() &#125;&#125;task clean(type: Delete) &#123; delete rootProject.buildDir&#125; (2)lib 的build.gradle配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697apply plugin: &apos;com.android.library&apos;apply plugin: &apos;com.github.dcendents.android-maven&apos;apply plugin: &apos;com.jfrog.bintray&apos;android &#123; compileSdkVersion 23 buildToolsVersion &quot;23.0.3&quot; resourcePrefix &quot;bounceprogressbar__&quot; //这个随便填 defaultConfig &#123; minSdkVersion 14 targetSdkVersion 23 versionCode 1 versionName &quot;1.0&quot; &#125; buildTypes &#123; release &#123; minifyEnabled false proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos; &#125; &#125;&#125;dependencies &#123; compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;]) testCompile &apos;junit:junit:4.12&apos; compile &apos;com.android.support:appcompat-v7:23.4.0&apos; compile &apos;com.nineoldandroids:library:2.4.0+&apos;&#125;// 这个version是区分library版本的，因此当我们需要更新library时记得修改这个version// 这个version影响后面的引用version = &quot;1.0.0&quot;def siteUrl = &apos;https://github.com/guoyoujin/MySnackBar&apos; // 项目的主页def gitUrl = &apos;https://github.com/guoyoujin/MySnackBar.git&apos; // Git仓库的urlgroup = &quot;com.trycatch.android&quot; // Maven Group ID for the artifact，一般填你唯一的包名install &#123; repositories.mavenInstaller &#123; // This generates POM.xml with proper parameters pom &#123; project &#123; packaging &apos;aar&apos; // Add your description here name &apos;Android SnackBar Widget&apos; //项目描述 url siteUrl // Set your license licenses &#123; license &#123; name &apos;The Apache Software License, Version 2.0&apos; url &apos;http://www.apache.org/licenses/LICENSE-2.0.txt&apos; &#125; &#125; developers &#123; developer &#123; id &apos;guoyoujin&apos; //填写的一些基本信息 name &apos;TryCatch&apos; email &apos;guoyoujin123@gmail.com&apos; &#125; &#125; scm &#123; connection gitUrl developerConnection gitUrl url siteUrl &#125; &#125; &#125; &#125;&#125;task sourcesJar(type: Jar) &#123; from android.sourceSets.main.java.srcDirs classifier = &apos;sources&apos;&#125;task javadoc(type: Javadoc) &#123; source = android.sourceSets.main.java.srcDirs classpath += project.files(android.getBootClasspath().join(File.pathSeparator))&#125;task javadocJar(type: Jar, dependsOn: javadoc) &#123; classifier = &apos;javadoc&apos; from javadoc.destinationDir&#125;artifacts &#123; archives javadocJar archives sourcesJar&#125;Properties properties = new Properties()properties.load(project.rootProject.file(&apos;local.properties&apos;).newDataInputStream())bintray &#123; user = properties.getProperty(&quot;bintray.user&quot;) key = properties.getProperty(&quot;bintray.apikey&quot;) configurations = [&apos;archives&apos;] pkg &#123; repo = &quot;maven&quot; name = &quot;MySnackBar&quot; //发布到JCenter上的项目名字 websiteUrl = siteUrl vcsUrl = gitUrl licenses = [&quot;Apache-2.0&quot;] publish = true &#125;&#125; (3)配置gradle的版本：在文件gradle/wrapper/gradle-wrapper.properties123456#Mon Dec 28 10:00:20 PST 2015distributionBase=GRADLE_USER_HOMEdistributionPath=wrapper/distszipStoreBase=GRADLE_USER_HOMEzipStorePath=wrapper/distsdistributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip (4)查看你的gradle版本，输入命令12345678910111213➜ MyCustomSnackBar git:(master) ✗ gradle -v------------------------------------------------------------Gradle 2.14.1------------------------------------------------------------Build time: 2016-07-18 06:38:37 UTCRevision: d9e2113d9fb05a5caabba61798bdb8dfdca83719Groovy: 2.4.4Ant: Apache Ant(TM) version 1.9.6 compiled on June 29 2015JVM: 1.8.0_40 (Oracle Corporation 25.40-b25)OS: Mac OS X 10.11.6 x86_64 可以看到我的gradle版本是最新的gradle 2.14.1而且我是用home brew管理的gradle，你也可以使用这个插件管理，他是用ruby写的 4.环境配置好了接下来就是输入命令了123gradle install or sudo gradle installgradle bintrayUpload or sudo gradle bintrayUpload 如果中间没有什么问题的话，那就应该是返回success了 5.接下来就是在jcenter里面点击 AddToJcenter发出一个请求等着就行了6.AddToJcenter成功之后，最后就是引用自己的lib库了，代码如下：123dependencies &#123; compile &apos;com.trycatch.android:mysnackbar:1.0.0&apos; &#125;]]></content>
      <tags>
        <tag>android</tag>
        <tag>jcenter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于ruby赋值的一些注意事项]]></title>
    <url>%2F2017%2F05%2F17%2F%E5%85%B3%E4%BA%8Eruby%E8%B5%8B%E5%80%BC%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%2F</url>
    <content type="text"><![CDATA[看下面代码:12345678910params = &#123;a:"1",b:"2",c:"3"&#125; =&gt; &#123;:a=&gt;"1", :b=&gt;"2", :c=&gt;"3"&#125; pa = params =&gt; &#123;:a=&gt;"1", :b=&gt;"2", :c=&gt;"3"&#125; pa.delete(:a) =&gt; "1" params =&gt; &#123;:b=&gt;"2", :c=&gt;"3"&#125; pa =&gt; &#123;:b=&gt;"2", :c=&gt;"3"&#125; 发现了吗？我执行1234567891011```rubyparams = &#123;a:&quot;1&quot;,b:&quot;2&quot;,c:&quot;3&quot;&#125; =&gt; &#123;:a=&gt;&quot;1&quot;, :b=&gt;&quot;2&quot;, :c=&gt;&quot;3&quot;&#125; pa = params.clone =&gt; &#123;:a=&gt;&quot;1&quot;, :b=&gt;&quot;2&quot;, :c=&gt;&quot;3&quot;&#125; pa.delete(:a) =&gt; &quot;1&quot; pa =&gt; &#123;:b=&gt;&quot;2&quot;, :c=&gt;&quot;3&quot;&#125; params =&gt; &#123;:a=&gt;&quot;1&quot;, :b=&gt;&quot;2&quot;, :c=&gt;&quot;3&quot;&#125; 对没错就是上面的clone方法。当然你也可以使用ruby的深拷贝 让我们在看下方法里面传参数的使用12345678910params = &#123;a:"1",b:"2",c:"3"&#125; =&gt; &#123;:a=&gt;"1", :b=&gt;"2", :c=&gt;"3"&#125; def format_params pa=nil pa.delete(:a)end =&gt; :format_params format_params(params) =&gt; "1" params =&gt; &#123;:b=&gt;"2", :c=&gt;"3"&#125; 我擦哦，方法穿参数居然也是这么坑，有木有，所以大家自己注意点再来看数组12345678910params = [1,2,3,4,5] =&gt; [1, 2, 3, 4, 5] def format_params pa=nil pa[0]=100end =&gt; :format_params format_params(params) =&gt; 100 params =&gt; [100, 2, 3, 4, 5] 数组也会这样啊，醉了 不过大家别害怕，这些问题只是存在于一些hash ，json，array数据才会出现的，下面看代码12345678910a = 100 =&gt; 100 def format_a p=nil p = 200end =&gt; :format_a format_a(a) =&gt; 200 2.2.5 :042 &gt; a =&gt; 100 这个还好不会变哈]]></content>
      <categories>
        <category>ruby</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于http和https允许请求设置header问题]]></title>
    <url>%2F2017%2F05%2F17%2F%E5%85%B3%E4%BA%8Ehttp%E5%92%8Chttps%E5%85%81%E8%AE%B8%E8%AF%B7%E6%B1%82%E8%AE%BE%E7%BD%AEheader%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[在给微信小程序提供接口的时候使用的是1不过服务器一直没获取到，怀疑可能是```nginx```没有允许设置```header```。解决办法就是在```nginx```配置文件里面加上```underscores_in_headers on 在给微信小程序提供接口的时候使用的是https，token是放在header里面，不过服务器一直没获取到，怀疑可能是nginx没有允许设置header。解决办法就是在nginx配置文件里面加上underscores_in_headers on;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647### wechatapi Start upstream wechatapi &#123; server localhost:8009; &#125; server &#123; listen 443 ssl; server_name api.test.org; underscores_in_headers on; ssl on; ssl_certificate /ssl/bundle.crt; ssl_certificate_key /ssl/txzs_unsecure.key; client_max_body_size 20M; access_log /system/logs/wechatapi_access.log; error_log /system/logs/wechatapi_error.log; root /system/wechatapi/current/public; index index.html; location / &#123; try_files $uri @wechatapi; &#125; location @wechatapi &#123; proxy_read_timeout 300; proxy_connect_timeout 300; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_redirect off; proxy_pass http://wechatapi; &#125; error_page 403 /500.html; error_page 404 /500.html; error_page 405 /500.html; error_page 500 501 502 503 504 /500.html; location ^~ /error/ &#123; internal; root /system/wechatapi/current/public; &#125; location /images/ &#123; try_files $uri /images/error.jpg; &#125; &#125; # wechatapi end]]></content>
      <categories>
        <category>https</category>
      </categories>
      <tags>
        <tag>https</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ruby 关于返回几秒前，几小时前，1天前......]]></title>
    <url>%2F2017%2F05%2F17%2Fruby-%E5%85%B3%E4%BA%8E%E8%BF%94%E5%9B%9E%E5%87%A0%E7%A7%92%E5%89%8D%EF%BC%8C%E5%87%A0%E5%B0%8F%E6%97%B6%E5%89%8D%EF%BC%8C1%E5%A4%A9%E5%89%8D%2F</url>
    <content type="text"><![CDATA[这个需求是：当小于60秒的时候返回时间为xx秒前；当小于60分钟大于60秒的时候返回xxx小时前；当隔1天的时候显示一天前；当大于隔2天的时候，显示xx月xx日；当跨年的时候显示xxxx年xx月xx日； 下面是实现代码，具体的话你可以按照你的需求进行修改1234567891011121314151617181920212223242526272829module TimeFormat def self.time_text new_time=Time.now,old_time=Time.now if new_time.year == old_time.year hour_subtract = new_time.to_i/3600 - old_time.to_i/3600 min_subtract = new_time.to_i/60 - old_time.to_i/60 sec_subtract = new_time.to_i - old_time.to_i if new_time.at_beginning_of_day == old_time.at_beginning_of_day if min_subtract&lt;60 if sec_subtract&lt;60 &quot;#&#123;sec_subtract&#125;秒前&quot; else &quot;#&#123;min_subtract&#125;分钟前&quot; end else &quot;#&#123;hour_subtract&#125;小时前&quot; end else if (old_time.at_beginning_of_day+1.day) == new_time.at_beginning_of_day &quot;1天前&quot; else old_time.strftime(&quot;%m月%d日&quot;) end end else old_time.strftime(&quot;%Y年%m月%d日&quot;) end endend]]></content>
      <categories>
        <category>ruby</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用微信的 JS SDK 选取手机照片并进行上传,Iphone无法显示缩略图]]></title>
    <url>%2F2017%2F05%2F17%2F%E4%BD%BF%E7%94%A8%E5%BE%AE%E4%BF%A1%E7%9A%84-JS-SDK-%E9%80%89%E5%8F%96%E6%89%8B%E6%9C%BA%E7%85%A7%E7%89%87%E5%B9%B6%E8%BF%9B%E8%A1%8C%E4%B8%8A%E4%BC%A0-Iphone%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%BC%A9%E7%95%A5%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[前言最近从三月初开始就发现有用户反应微信浏览器选择图片显示不了预览，仔细查找发现跟微信最近升级浏览器内核有关，发现需要升级weixin js sdk了，并且需要修改一些方法，以及对一些老版本的兼容。 weixin选取图片代码(老版本jweixin-1.2.0.js之前的版本)123456789wx.chooseImage(&#123; count: 1, sizeType: [&apos;original&apos;, &apos;compressed&apos;], sourceType: [&apos;album&apos;, &apos;camera&apos;], success: function (res) &#123; var localId = res.localIds[0]; $(&apos;img.avatar-temp&apos;).attr(&apos;src&apos;, localId); &#125;)&#125;; 使用如上代码发现图片在iphone上无法显示，Android上可以无差别显示，那肯定是浏览器内核的问题了，解决办法就是升级weixin js sdk喽，直接升级微信js sdk1&lt;script src=&quot;https://res.wx.qq.com/open/js/jweixin-1.2.0.js&quot;&gt;&lt;/script&gt; 接下来就是修改选显示图片的步骤了1234567891011121314151617181920212223wx.chooseImage(&#123; count: 1, sizeType: [&apos;original&apos;, &apos;compressed&apos;], sourceType: [&apos;album&apos;, &apos;camera&apos;], success: function (res) &#123; var localId = res.localIds[0]; if(window.__wxjs_is_wkwebview)&#123; wx.getLocalImgData(&#123; localId: auth_image.localId, success: function (res) &#123; var localData = res.localData; localData = localData.replace(&apos;jgp&apos;, &apos;jpeg&apos;); $(&apos;img.avatar-temp&apos;).attr(&apos;src&apos;, localData); &#125;, fail:function(res)&#123; alert(res.errMsg); &#125; &#125;); &#125;else&#123; $(&apos;img.avatar-temp&apos;).attr(&apos;src&apos;, localId); &#125; &#125;)&#125;; 使用getLocalImgData方法即可在wkwebview浏览器内核也可以正常显示图片了。注意记得一定要判断浏览器内核，不然总有一个出问题的，并且在else里面做你该做的事情，千万别忘了！！！！ weixin上传图片我选择直接上传到微信服务器上面，然后在利用反回的图片地址，让自己服务器去异步下载图片12345678910wx.uploadImage(&#123; localId: localId, isShowProgressTips: 1, success: function (res) &#123; auth_image.serverId = res.serverId; &#125;, fail: function (res) &#123; alert(JSON.stringify(res)); &#125;&#125;);]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>weixin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo hexo-theme-next 搭建blog系统]]></title>
    <url>%2F2017%2F05%2F16%2Fhexo%E6%90%AD%E5%BB%BAblog%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[下载安装hexo1$ npm install -g hexo-cli 安装好hexo以后，在终端输入：1$ hexo 得到如下信息123456789➜ guoyoujin.github.io git:(develop) ✗ hexoUsage: hexo &lt;command&gt;Commands: clean Removed generated files and cache. config Get or set configurations. deploy Deploy your website. generate Generate static files. ----------------------部分省略or you can check the docs: http://hexo.io/docs/ 初始化博客123456// 建立一个博客文件夹，并初始化博客，guoyoujin.github.io为文件夹的名称，可以随便起名字$ hexo init guoyoujin.github.io// 进入博客文件夹，guoyoujin.github.io为文件夹的名称$ cd guoyoujin.github.io// node.js的命令，根据博客既定的dependencies配置安装所有的依赖包$ npm install hexo next them 使用手册http://theme-next.iissnan.com/getting-started.html 安装next主题1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 启用主题与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。12启用 NexT 主题theme: next 到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。 验证主题首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 hexo s –debug。1$ hexo s --debug 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：1INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 此时即可使用浏览器访问 http://localhost:4000，检查站点是否正确运。不出所料应该已经能看到样式了 主题设定选择 Scheme Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是： Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白Mist - Muse 的紧凑版本，整洁有序的单栏外观Pisces - 双栏 Scheme，小家碧玉似的清新Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。 选择 Pisces Scheme123#scheme: Muse#scheme: Mistscheme: Pisces 设置语言编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：1language: zh-Hans hexo-admin配置https://github.com/jaredly/hexo-admin123npm install --save hexo-adminhexo server -dopen http://localhost:4000/admin/ 密码设置，需要在根母目录下的/_config.yml文件里面加入如下代码1234admin: username: guoyoujin password_hash: $2a$10$8f0CO288aEgpb0BQk0mAEOIDwPS.s6nl703xL6PLTVzM.758x8xsi secret: a secret something 注意上面的password_hash需要使用nodejs语语法生成12345$ npm install bcrypt-nodejs --save$ node&gt; const bcrypt = require(&apos;bcrypt-nodejs&apos;)&gt; bcrypt.hashSync(&apos;your password secret here!&apos;)//=&gt; &apos;$2a$10$8f0CO288aEgpb0BQk0mAEOIDwPS.s6nl703xL6PLTVzM.758x8xsi&apos; 把上面输出的值替换成password_hash的值即可 发布运行一下命令将Hexo上传到Github 12$ hexo generate$ hexo deploy 开启baidu站点收录链接地址: http://zhanzhang.baidu.com/site 添加站点: guoyoujin.github.io 进行验证: 注意上面的content的值有用，需要写入/them/next/_config.yml里面，如下：1baidu_site_verification: C5V7yJu5y2 完成以上步骤之后，部署一下，点击完成验证，即可验证成功 Hexo插件之百度主动提交链接百度地址： https://tongji.baidu.com 前提您得注册百度站长工具，然后在工具-&gt;网页抓取-&gt;链接提交里找到你的密匙。首先，在Hexo根目录下，安装本插件：1npm install hexo-baidu-url-submit --save 在 them/next/_config.yml文件里面，填写以下数据12345baidu_url_submit: count: 1 ## 提交最新的一个链接 host: guoyoujin.github.io ## 在百度站长平台中注册的域名 token: uSnj5Dx11111111 ## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里 百度统计 http://tongji.baidu.com/sc-web在 them/next/_config.yml文件里面，填写以下数据12# Baidu Analytics IDbaidu_analytics: 658ef8640c9dcf118730ad9d90 leancloud阅读统计 https://leancloud.cn教程地址： https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git命令大全]]></title>
    <url>%2F2017%2F05%2F16%2Fgit%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687git init # 初始化本地git仓库（创建新仓库）git config --global user.name &quot;xxx&quot; # 配置用户名git config --global user.email &quot;xxx@xxx.com&quot; # 配置邮件git config --global color.ui true # git status等命令自动着色git config --global color.status autogit config --global color.diff autogit config --global color.branch autogit config --global color.interactive autogit config --global --unset http.proxy # remove proxy configuration on gitgit clone git+ssh://git@192.168.53.168/VT.git # clone远程仓库git status # 查看当前版本状态（是否修改）git add xyz # 添加xyz文件至indexgit add . # 增加当前子目录下所有更改过的文件至indexgit commit -m &apos;xxx&apos; # 提交git commit --amend -m &apos;xxx&apos; # 合并上一次提交（用于反复修改）git commit -am &apos;xxx&apos; # 将add和commit合为一步git rm xxx # 删除index中的文件git rm -r * # 递归删除git log # 显示提交日志git log -1 # 显示1行日志 -n为n行git log -5git log --stat # 显示提交日志及相关变动文件git log -p -mgit show dfb02e6e4f2f7b573337763e5c0013802e392818 # 显示某个提交的详细内容git show dfb02 # 可只用commitid的前几位git show HEAD # 显示HEAD提交日志git show HEAD^ # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本git tag # 显示已存在的taggit tag -a v2.0 -m &apos;xxx&apos; # 增加v2.0的taggit show v2.0 # 显示v2.0的日志及详细内容git log v2.0 # 显示v2.0的日志git diff # 显示所有未添加至index的变更git diff --cached # 显示所有已添加index但还未commit的变更git diff HEAD^ # 比较与上一个版本的差异git diff HEAD -- ./lib # 比较与HEAD版本lib目录的差异git diff origin/master..master # 比较远程分支master上有本地分支master上没有的git diff origin/master..master --stat # 只显示差异的文件，不显示具体内容git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）git branch # 显示本地分支git branch --contains 50089 # 显示包含提交50089的分支git branch -a # 显示所有分支git branch -r # 显示所有原创分支git branch --merged # 显示所有已合并到当前分支的分支git branch --no-merged # 显示所有未合并到当前分支的分支git branch -m master master_copy # 本地分支改名git checkout -b master_copy # 从当前分支创建新分支master_copy并检出git checkout -b master master_copy # 上面的完整版git checkout features/performance # 检出已存在的features/performance分支git checkout --track hotfixes/BJVEP933 # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支git checkout v2.0 # 检出版本v2.0git checkout -b devel origin/develop # 从远程分支develop创建新本地分支devel并检出git checkout -- README # 检出head版本的README文件（可用于修改错误回退）git merge origin/master # 合并远程master分支至当前分支git cherry-pick ff44785404a8e # 合并提交ff44785404a8e的修改git push origin master # 将当前分支push到远程master分支git push origin :hotfixes/BJVEP933 # 删除远程仓库的hotfixes/BJVEP933分支git push --tags # 把所有tag推送到远程仓库git fetch # 获取所有远程分支（不更新本地分支，另需merge）git fetch --prune # 获取所有原创分支并清除服务器上已删掉的分支git pull origin master # 获取远程分支master并merge到当前分支git mv README README2 # 重命名文件README为README2git reset --hard HEAD # 将当前版本重置为HEAD（通常用于merge失败回退）git rebasegit branch -d hotfixes/BJVEP933 # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）git branch -D hotfixes/BJVEP933 # 强制删除分支hotfixes/BJVEP933git ls-files # 列出git index包含的文件git show-branch # 图示当前分支历史git show-branch --all # 图示所有分支历史git whatchanged # 显示提交历史对应的文件修改git revert dfb02e6e4f2f7b573337763e5c0013802e392818 # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818git ls-tree HEAD # 内部命令：显示某个git对象git rev-parse v2.0 # 内部命令：显示某个ref对于的SHA1 HASHgit reflog # 显示所有提交，包括孤立节点git show HEAD@&#123;5&#125;git show master@&#123;yesterday&#125; # 显示master分支昨天的状态git log --pretty=format:&apos;%h %s&apos; --graph # 图示提交日志git show HEAD~3git show -s --pretty=raw 2be7fcb476git stash # 暂存当前修改，将所有至为HEAD状态git stash list # 查看所有暂存git stash show -p stash@&#123;0&#125; # 参考第一次暂存git stash apply stash@&#123;0&#125; # 应用第一次暂存git grep &quot;delete from&quot; # 文件中搜索文本“delete from”git grep -e &apos;#define&apos; --and -e SORT_DIRENTgit gcgit fsckgit checkout -b test remotes/origin/test #本地切换到远程分支 【参考资料】 git]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>